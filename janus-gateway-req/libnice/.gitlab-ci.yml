stages:
 - build
 - test
 - deploy

default:
  image: registry.freedesktop.org/libnice/libnice/centos7/meson-build


build:
  stage: build
  variables:
    PREFIX: "${CI_PROJECT_DIR}/libnice-prefix"
  except:
    - schedules
  before_script:
    - mkdir -p "${CI_PROJECT_DIR}"
  script:
    ## && true to make gitlab-ci happy
    - source scl_source enable rh-python36 && true
    - meson --werror --warnlevel 2 -Dgtk_doc=enabled --prefix=$PREFIX build/
    - ninja-build -C build/
  artifacts:
    paths:
      - build/

build msys2:
  image: 'registry.freedesktop.org/gstreamer/gst-ci/amd64/windows:v13-master'
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '1809'
  variables:
    MESON_ARGS: >
      --prefix=${CI_PROJECT_DIR}/libnice-prefix
    # Make sure any failure in PowerShell scripts is fatal
    ErrorActionPreference: 'Stop'
    WarningPreference: 'Stop'
  before_script:
    - pip3 install -U meson
  script:
    # Make sure powershell exists on errors
    # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6
    - $ErrorActionPreference = "Stop"

    # For some reason docker build hangs if this is included in the image, needs more troubleshooting
    - $env:PATH += ';C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\msys64\mingw32\bin'
    # It seems that the gpg doesn't like the SSL secured version of the keyserver
    - C:\msys64\usr\bin\bash -c "pacman-key --init && pacman-key --populate msys2 && pacman-key --refresh-keys || true"
    - echo "Download newest msys2 keyring"
    - C:\msys64\usr\bin\bash -c "curl -O http://repo.msys2.org/msys/x86_64/msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz && pacman -U --noconfirm msys2-keyring-r21.b39fb11-1-any.pkg.tar.xz"
    - C:\msys64\usr\bin\bash -c "pacman-key --init && pacman-key --populate msys2"
    - C:\msys64\usr\bin\bash -c "pacman-key --refresh-keys || true"
    - echo "Updating MSYS2"
    - C:\msys64\usr\bin\bash -c "pacman -Syuu --noconfirm || echo Update failed, ignoring"
    - echo "Killing all MSYS2 processes"
    - taskkill /F /FI "MODULES eq msys-2.0.dll"
    - echo "Completing MSYS2 update"
    - C:\msys64\usr\bin\bash -c "pacman -Suu --noconfirm"
    - echo "Installing needed MSYS2 packages"
    - C:\msys64\usr\bin\bash -c "pacman -Sy --noconfirm --needed mingw-w64-x86_64-toolchain ninja"

    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    - $env:PATH += ";C:\msys64\usr\bin;C:\msys64\mingw64/bin;C:\msys64\mingw32/bin"

    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:CI_PROJECT_DIR = $env:CI_PROJECT_DIR.replace('\','/')
    - $env:MESON_ARGS = $env:MESON_ARGS.replace('\','/')

    # Build and run the tests.
    # This is part of the same job due to a bug in the gitlab-runner
    # that prevents us from exporting artifacts with docker-windows
    # executors. It has since been fixed in gitlab 12.1, but
    # we are blocked from upgrading currently.
    #
    # Gitlab Runner issue: https://gitlab.com/gitlab-org/gitlab-runner/issues/4291
    # Blocked upgrade issue: https://gitlab.freedesktop.org/gstreamer/gst-ci/issues/6#note_192780
    - C:\msys64\usr\bin\bash -c "meson build $env:MESON_ARGS &&
        ninja -j 1 -C build &&
        meson test -C build --print-errorlogs --suite libnice"
  artifacts:
    when: on_failure
    paths:
      - build/meson-logs/
      - build/build.ninja

.build msvc:
  extends: build msys2
  variables:
    GLIB_VERSION: 2.64.2
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")

    # Build and run the tests.
    # This is part of the same job due to a bug in the gitlab-runner
    # that prevents us from exporting artifacts with docker-windows
    # executors. It has since been fixed in gitlab 12.1, but
    # we are blocked from upgrading currently.
    #
    # Gitlab Runner issue: https://gitlab.com/gitlab-org/gitlab-runner/issues/4291
    # Blocked upgrade issue: https://gitlab.freedesktop.org/gstreamer/gst-ci/issues/6#note_192780
    - New-Item -Path subprojects -Name openssl.wrap -Value "[wrap-git]`r`ndirectory=openssl`r`nurl=https://gitlab.freedesktop.org/libnice/openssl-binaries-for-ci.git`r`nrevision=1.1.1c`r`n"
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson subprojects download &&
        meson wrap promote subprojects\glib-$env:GLIB_VERSION\subprojects\libffi.wrap &&
        meson wrap promote subprojects\glib-$env:GLIB_VERSION\subprojects\zlib.wrap &&
        meson wrap promote subprojects\glib-$env:GLIB_VERSION\subprojects\proxy-libintl.wrap &&
        meson subprojects download"
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson build $env:MESON_ARGS &&
        ninja -C build &&
        meson test -C build --print-errorlogs --suite libnice"

build msvc amd64:
  extends: .build msvc
  variables:
    ARCH: 'amd64'

build msvc x86:
  extends: .build msvc
  variables:
    ARCH: 'x86'
        
test:
  stage: test
  needs:
    - build
  except:
    - schedules
  script:
    - ifconfig
    - source scl_source enable rh-python36 && true
    - meson test -C build/ --setup debug
  artifacts:
    when: on_failure
    paths:
      - build/meson-logs/


test valgrind:
  extends: test
  script:
    - ifconfig
    - source scl_source enable rh-python36 && true
    - meson configure build -Dgtk_doc=disabled
    - meson test -C build/ --setup valgrind --print-errorlogs


doc-and-install:
  stage: test
  needs:
    - build
  except:
    - schedules
  variables:
    PREFIX: "${CI_PROJECT_DIR}/libnice-prefix"
  script:
    - source scl_source enable rh-python36 && true
    - ninja-build -C build/ libnice-doc
    - ninja-build -C build/ install
    - ls -lR ${PREFIX}
  artifacts:
    paths:
      - build/docs/reference/libnice/html/

submit-to-coverity:
 stage: test
 variables:
   COVERITY_PROJECT: libnice
   PREFIX: "${CI_PROJECT_DIR}/libnice-prefix"
 only:
  - schedules
  - web
 dependencies: []
 before_script:
  - mkdir -p "${CI_PROJECT_DIR}"
 script:
  - curl -v https://scan.coverity.com/download/linux64  -o coverity_tool.tgz  --data "token=${COVERITY_TOKEN}&project=${COVERITY_PROJECT}" && tar xf coverity_tool.tgz && rm coverity_tool.tgz
  - mv cov-analysis-linux64-* cov-analysis-linux64
  - source scl_source enable rh-python36 && true
  - meson --werror --warnlevel 2 -Dgtk_doc=disabled -Dinstrospection=disabled --prefix=$PREFIX cov-build/
  - export PATH="$PATH:${CI_PROJECT_DIR}/cov-analysis-linux64/bin"
  - echo $PATH
  - cov-build --dir cov-int ninja-build -C cov-build
  - tar czvf libnice.tgz cov-int
  - curl --form token=$COVERITY_TOKEN --form email=olivier.crete@ocrete.ca --form file=@libnice.tgz --form version="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" --form description="CI weekly run" https://scan.coverity.com/builds?project=libnice

pages:
  stage: deploy
  dependencies:
    - doc-and-install
  only:
    - latest-release
  artifacts:
    paths:
      - public
    expire_in: 1 year
  # For some reason, trigger gets rejected
  # trigger: libnice/libnice-website
  script:
    - mkdir public/
    - mv build/docs/reference/libnice/html/ public/libnice/
